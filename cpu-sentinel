#!/bin/bash

# CPU Sentinel
#
# This script periodically scans for a list of process names, and uses the
# `renice` utility to deprioritize the associated PIDs associated with those
# process names.
#
# It can be run as a macOS Launch Daemon service to continuously monitor the
# system and prevent chronically problematic processes from running away with
# the CPU.
#
# Author(s): Lucas Starrett (luacs.c.starrett@gmail.com)
# License: MIT


display_help() {
	echo "Usage:"
	echo "   -h | --help     Display this help text"
	echo "   -v | --version  Display CPU Sentinel version"
	echo "   -f CONFIG       Path to config file containing list of process names to deprioritize"
	echo "   -s SECONDS      Stay alive and re-scan for process names every SECONDS (default: run once and exit)"
	echo "   -p PRIORITY     Priority (\"niceness\") level to set for identified processes"
	echo "                     highest -20 --------- 0 --------- 20 lowest"
	echo "                     System default: 0, CPU Sentinel default: 20"
	echo "   --brew-config   Display config, log, and err file paths (if installed and run as a homebrew service)"
	echo "   --reset         Reset the prioritization of all processes in process names file to system default (0)"
}


display_version() {
	echo "CPU Sentinel v1.0"
}


# Display config and log file paths for CPU Sentinel when installed as a Homebrew service
display_homebrew_config() {
	brew_config_file="`brew --prefix`/etc/cpu-sentinel/procs.conf"
	if [[ ! -f $brew_config_file ]]; then
		echo >&2 "Config file not found at '$brew_config_file'. Did you install via Homebrew?"
	fi
	echo "CONFIG : $brew_config_file"

	brew_log_file="`brew --prefix`/var/log/homebrew.mxcl.cpu-sentinel.log"
	echo "LOG    : $brew_log_file"

	brew_err_file="`brew --prefix`/var/log/homebrew.mxcl.cpu-sentinel.err"
	echo "ERR    : $brew_err_file"
}


# String of space-separated PIDs for renice command
pid_string=''

# Default scan frequency (0 to run once and exit)
frequency=0

# Default deprioritization level
#   The macOS priority range for nice/renice is: (highest -20 ------ 0 ------ 20 lowest)
#   The default priority is '0' for all processes.
priority="20"

# Build list of PIDs corresponding to process names from input file
build_pid_list() {
	if [ $reset ]; then
		verb="reset"
	elif [ $priority -gt 0 ]; then
		verb="deprioritize"
	else
		verb="reprioritize"
	fi
	sentinel_list="\nProcess names and associated PIDs to $verb to $priority priority:"
	sentinel_list="$sentinel_list\n----------------------------somnium--------------------------------"
	while IFS='' read -r process || [ -n "$process" ]; do
		if [ "$process" = "One process name per line (can contain spaces)" ]; then
			echo >&2
			echo >&2 "Edit process names file before running. Aborting."
			exit 1
		fi
		matching_pids=`pgrep "$process"`
		pid_string="$pid_string $matching_pids"
		sentinel_list="$sentinel_list\n Process Name: $process\n \____ PID(s): $matching_pids"
	done < $process_names_file
	echo -e $sentinel_list
}

# Scan for troublesome processes every
sentinel() {
	echo
	if [ $reset ] || [ $frequency -eq 0 ]; then
		echo "Starting CPU Sentinel..."
		echo $(date)
	else
		echo "Starting CPU Sentinel (scanning for process names every $frequency seconds)..."
		echo $(date)
	fi
	while true; do
		build_pid_list
		renice $priority -p $pid_string
		if [ $reset ]; then
			echo
			echo "Priorities for processes in '$process_names_file' have been reset to system default."
			echo
			exit 0
		elif [ $frequency -eq 0 ]; then
			echo
			echo "Priorities for processes in '$process_names_file' have been set to '$priority'."
			echo
			exit 0
		fi
		echo
		echo "Priorities for processes in '$process_names_file' have been set to '$priority'. Sleeping for $frequency seconds..."
		echo
		sleep $frequency
	done
}


# check arguments
if [ $# -eq 0 ]; then
	display_help
else

	# Check flags and parse options
	while [ $# -gt 0 ]; do
		case "$1" in
			-h|--help)
				display_help
				exit 0
				;;
			-v|--version)
				display_version
				exit 0
				;;
			-f)
				shift
				if [ $# -gt 0 ]; then
					process_names_file=$1
				else
					display_help
					exit 1
				fi
				shift
				;;
			-s)
				shift
				if [ $# -gt 0 ]; then
					frequency=$1
				else
					display_help
					exit 1
				fi
				shift
				;;
			-p)
				shift
				if [ $# -gt 0 ]; then
					priority=$1
					if [ $priority -lt -20 ] || [ $priority -gt 20 ]; then
						echo >&2 "Invalid priority value. Use a value between -20 and 20. Aborting."
						exit 1
					fi
				else
					display_help
					exit 1
				fi
				shift
				;;
			--brew-config)
				display_homebrew_config
				exit 0
				;;
			--reset)
				reset=true
				priority=0
				shift
				;;
			*)
				echo >&2 "Invalid argument. Aborting."
				display_help
				exit 1
				;;
		esac
	done

	# check that user has provided required --process-list argument
	if [[ -z $process_names_file ]]; then
		echo >&2 "Missing required --process-list argument. Aborting."
		display_help
		exit 1
	fi
	if [[ ! -f $process_names_file ]]; then
		echo >&2 "Process names file not found at '$process_names_file'. Aborting."
		exit 1
	fi

	# Start CPU sentinel
	sentinel

fi
